@import "bus.sprites.css";

:root {
    --dx: -42px;
    --Î´r: 38px;
    --dy: -47px;
    --bg: silver;
}

label { cursor: hand; }
.tile,.picker label { background-image: url(tiles.png); min-width: 7px; min-height: 47px; }

.bus input {
    position: absolute;
    left: -9999px;
}

.shadow label {
    display: inline-flex;
    flex-direction: column;
    min-height: 47px;
    justify-content: space-between;
    align-items: center;
    vertical-align: bottom;
    position: relative;
}

.shadow label .bottom {
    position: absolute;
    bottom: 0;
}

.picker {
    display: none;
    position: absolute;
    white-space: nowrap;
    z-index: 998;
    border: 1px solid gray;
    border-radius: 7px;
    padding: 1px;
    background-color: silver;
    opacity: 0.8;
    transition: background-color 0.5s;
}

.picker input + .w  { min-height: 20px; }
.picker input + .a,
.picker input + .l { min-height: 17px; max-height: 17px; }
.picker input + label:hover { background-color: white; }

.picker :checked + label {
    border: 1px solid red;
    background-color: white;
    border-radius: 2px;
}

.picker label { display: inline-block; margin: 1px; } 

.picker .blank { min-height: 17px; max-height: 17px; width: 16px; }
.shadow:has(~ .picker :checked + .a5) .bottom { right: 0; }

.slot:has(.picker :checked + .f) ~ .slot .shadow:has(~ .picker :checked + .l5) .bottom { right: 0; }

.shadow:has(~ .picker :checked + .spot2) .top,
.spot2 { background-position: calc(var(--dx) * 7 - 1px) calc(var(--dy) * 2); width: 6px; }
.blank { background-position: calc(var(--dx) * 7 - 1px) calc(var(--dy) * 4); width: 22px; }

/*exceptions*/
.shadow:has(~ .picker :checked + .a2) .bottom,
.slot:has(.picker :checked + .f) ~ .slot .shadow:has(~ .picker :checked + .a5) .bottom { left: 0; }
.slot:has(.picker :checked + .f) ~ .slot .shadow:has(~ .picker :checked + .a2) .bottom { right: 0; left: initial; }
/*quirks*/
.shadow:has(~ .picker :checked + .l00) .bottom,
.shadow:has(~ .picker :checked + .l000) .bottom { right: 0; }
.shadow:has(~ .picker :checked + .w6):has(~ .picker :checked + .a3) .bottom { margin-left: -12px; }

.paint :checked + label,
.picker :checked + label,
.shadow:has(~ .picker :checked + .spot2) .top,
.spot2,
blink {
  animation: blink-animation 1s steps(5, start) infinite;
  -webkit-animation: blink-animation 1s steps(5, start) infinite;
}
@keyframes blink-animation { to { opacity: 0.2; } }
@-webkit-keyframes blink-animation { to { opacity: 0.2; } }

.slot,
.tile { display: inline-block; }
.shadow:has(.close) { background-color: #faa; opacity: 0.8; }
.picker,
.open:checked + label,
.shadow:has(.close) label { display: none; }

.shadow:has(.open:checked) ~ .picker { display: block; animation: fadeIn 0.5s; }
.shadow:has(.open:checked) ~ .shadow:has(.close) label { display: inline-flex; animation: fadeIn 0.5s; }

@keyframes fadeIn {
     from { opacity: 0; }
     to { opacity: 0.8; }
}

.bus-view {
    margin: 10px;
    white-space: nowrap;
}

.bus {
    display: inline-block;
    margin: 10px;
    border: 1px solid #eee;
    padding: 10px 10px 5px;
    border-radius: 10px;
    white-space: nowrap;
    background-color: rgba(0,0,0,25%);
}

*:has(#ddd:checked) ~ .bus {
    transform: perspective(3cm) rotateX(351deg) rotateY(333deg);
}

*:has(#port:not(:checked)) ~ .bus .slot:has(.picker :checked + .h) ~ .slot,
*:has(#port:not(:checked)) ~ .bus .f,
*:has(#port:not(:checked)) ~ .bus .r,
.slot .f,
.slot .r,
.slot:has(:checked + .t) ~ .slot .t,
.slot:has(:checked + .h) ~ .slot .h,
.slot:has(:checked + :not(.f)) + .slot:has(:checked + .h) + .slot .picker input + :not(.f),
.slot:has(:checked + .f) ~ .slot .f,
.slot:has(:checked + .f) + .slot .picker input + :not(.h),
.slot:has(:checked + .f) ~ .slot:has(:checked + .h) ~ .slot .h,
.slot:has(:checked + .f) ~ .slot:has(:checked + .t) + .slot .picker input + :not(.r),
.slot:has(:checked + .r) ~ .slot,
.slot:has(.picker :checked + .spot) ~ .slot:has(.picker :checked + .spot) {
    display: none;
}

.slot:has(:checked + .h) + .slot .f,
.slot:has(:checked + .f) + .slot .h,
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot .picker input + :is(.spot1):is(.t):is(.w):is(.d):is(.j), /*:not(.f):not(.r):not(.t):not(.h),*/
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot .t,
.slot:has(:checked + .f) ~ .slot:has(:checked + .t) + .slot .r {
    display: inline-block;
}

.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot .f,
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot:has(:checked + .t) + .slot .picker input + :not(.r) {
    display: none;
}

.left .slot .tile,
.left .slot .picker input + :not(.r),
.slot:has(.picker :checked + .f) ~ .slot .tile,
.slot:has(.picker :checked + .f) ~ .slot .picker input + :not(.r) {
    transform: scaleX(-1);
}

.tile.bottom,
.picker .conditional,
.picker .conditional  ~ label { display: none; }

.shadow,
.shadow:has(~ .picker .conditional ~ :checked):has(~ .picker :checked + .w) .bottom,
.picker :checked + .w ~ .conditional,
.picker :checked + .w ~ .conditional ~ label { display: inline-block; }