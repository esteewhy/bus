@import "bus.sprites.css";
@import "bus.selection.css";

:root {
    --dx: -42px;
    --Î´r: 38px;
    --dy: -47px;
    --bg: silver;
}

label { cursor: hand; }
.tile,.picker label { background-image: url(tiles.png); min-width: 7px; min-height: 47px; }

.bus input, #port, #ddd {
    position: absolute;
    left: -9999px;
}

.shadow label {
    display: inline-flex;
    flex-direction: column;
    min-height: 47px;
    justify-content: space-between;
    align-items: center;
    vertical-align: bottom;
    position: relative;
}

.shadow label .bottom {
    position: absolute;
    bottom: 0;
}

.picker {
    display: none;
    position: absolute;
    white-space: nowrap;
    z-index: 998;
    border: 1px solid gray;
    border-radius: 10px;
    padding: 1px;
    background-color: silver;
    opacity: 0.8;
    transition: background-color 0.5s;
    margin-top: -7px;
    transform-origin: top left;
    transform: scale(0.75);
}

.picker .spot, .picker .t, .picker .j, .picker .h, .picker .f, .picker .r {
    transform-origin: top left;
}

.picker .conditional ~ label {
    transform-origin: bottom left;
    min-height: 17px; max-height: 17px;
}
.picker .w  { min-height: 20px; }
.picker label:hover {
    background-color: white;
    transform: scale(2);
}

.picker label { display: inline-block; margin: 1px; } 
.picker .blank { min-height: 17px; max-height: 17px; width: 16px; }

.paint :checked + label,
.picker :checked + label,
:checked[value="spot2"] ~ .shadow .top,
.spot2,
blink {
  animation: blink-animation 1s steps(5, start) infinite;
  -webkit-animation: blink-animation 1s steps(5, start) infinite;
}
@keyframes blink-animation { to { opacity: 0.2; } }
@-webkit-keyframes blink-animation { to { opacity: 0.2; } }

.open:checked ~ .shadow { background-color: #faa; opacity: 0.8; }
.picker,
.open:checked ~ .shadow label[for$="open"],
.shadow label[for$="close"] { display: none; }

.open:checked ~ .picker { display: block; animation: fadeIn 0.5s; }
.open:checked ~ .shadow label[for$="close"] { display: inline-flex; animation: fadeIn 0.5s; }
@keyframes fadeIn {
     from { opacity: 0; }
     to { opacity: 0.8; }
}

.slot,
.tile { display: inline-block; }

:checked[value="spot2"] ~ .shadow .top,
.spot2 { background-position: calc(var(--dx) * 7 - 1px) calc(var(--dy) * 2); width: 6px; }
.blank { background-position: calc(var(--dx) * 7 - 1px) calc(var(--dy) * 4); width: 22px; }

/*exceptions and quircks */
:checked[value="a2"] ~ .shadow .bottom,/* Left-align axle */
.slot:has(:checked[value^="f"]) ~ .slot :checked[value="a5"] ~ .shadow .bottom { left: 0; }
.slot:has(:checked[value^="f"]) ~ .slot :checked[value="a2"] ~ .shadow .bottom { right: 0; left: initial; }/* Right-align axle in mirror view */
:checked[value="a5"] ~ .shadow .bottom { right: 0; } /* Right-align axle in left side view */
:checked[value="f"] ~ :checked[value="l5"] ~ .shadow .bottom { right: 0; } /* Right-align hatch in mirror view */
:checked[value="l00"] ~ .shadow .bottom,
:checked[value="l000"] ~ .shadow .bottom { right: 0; }
:checked[value="w6"] ~ :checked[value="a3"] ~ .shadow .bottom { margin-left: -12px; }

/* Form-based editor */
.bus {
    display: inline-block;
    margin: 1%;
    border: 1px solid #eee;
    padding: 10px 10px 5px;
    border-radius: 10px;
    white-space: nowrap;
    background-color: rgba(0,0,0,25%);
}

/* Linear viewer */
.bus-view {
    margin: 20px;
    white-space: nowrap;
    display: inline-block;
    box-shadow: 0px 5px 5px rgba(128, 128, 128, 0.7);
}

#ddd:checked ~ .bus { transform: perspective(3cm) rotateX(351deg) rotateY(333deg); } /* Lock 3D view */

#port:not(:checked) ~ .bus .slot:has(:checked[value^="h"]) ~ .slot, /* Hide everything beyond left side view */
#port:not(:checked) ~ .bus .f, /* Hide front part(s) from picker */
#port:not(:checked) ~ .bus .r, /* Hide rear part(s) from picker */
.slot .f,
.slot .r,
.slot :checked[value^="t"] ~ .shadow .slot .t,/* No more then one tail section. */
.slot :checked[value^="h"] ~ .shadow .slot .h,
.slot:has(:checked + :not(.f)) + .slot:has(:checked + .h) + .slot .picker input + :not(.f),
.slot:has(:checked + .f) ~ .slot .f,
.slot:has(:checked + .f) + .slot .picker input + :not(.h),
.slot:has(:checked + .f) ~ .slot:has(:checked + .h) ~ .slot .h,
.slot:has(:checked + .f) ~ .slot:has(:checked + .t) + .slot .picker input + :not(.r),
.slot:has(:checked + .r) ~ .slot,
.slot:has(.picker :checked + .spot) ~ .slot:has(.picker :checked + .spot) {
    display: none;
}

.slot:has(:checked + .h) + .slot .f,
.slot:has(:checked + .f) + .slot .h,
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot .picker input + :is(.spot1):is(.t):is(.w):is(.d):is(.j), /*:not(.f):not(.r):not(.t):not(.h),*/
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot .t,
.slot:has(:checked + .f) ~ .slot:has(:checked + .t) + .slot .r {
    display: inline-block;
}

/* Allow only one front and rear view slot */
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot .f,
.slot:has(:checked + .f) + .slot:has(:checked + .h) ~ .slot:has(:checked + .t) + .slot .picker input + :not(.r) {
    display: none;
}

/* Mirror right side */
.bus-view .left span,
.left .slot .tile,
.left .slot .picker input + :not(.r),
.slot :checked[value^="f"] ~ .shadow .slot .tile,
.slot :checked[value^="f"] ~ .picker :not(.r) {
    transform: scaleX(-1);
}

/* Hide bottom parts from picker by default */
.tile.bottom,
.picker .conditional,
.picker .conditional ~ label { display: none; }

/* Show bottom parts after top parts allow it */
.shadow,
:checked[value^="w"] ~ .conditional ~ :checked  ~ .shadow .tile.bottom,
:checked[value^="w"] ~ .picker .conditional,
:checked[value^="w"] ~ .picker .conditional ~ label { display: inline-block; }

/* 3D view */
/*
.paper-net {
    display: grid;
    grid-template-columns: auto auto auto;
    grid-template-rows: auto auto;
}

.paper-net > div {
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.paper-net .top { grid-column: 2; grid-row: 2; transform: rotate(0deg); }
.paper-net .left { grid-column: 2; grid-row: 1; transform: rotate(180deg); }
.paper-net .front { grid-column: 3; grid-row: 2; transform: rotate(-90deg); }
.paper-net .right { grid-column: 2; grid-row: 3; transform: rotate(0deg); }
.paper-net .rear { grid-column: 1; grid-row: 2; transform: rotate(90deg); }
.paper-net .bottom { grid-column: 2; grid-row: 4; transform: rotate(0deg); }
*/

.paper-net {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 200px;
    min-height: 70px;
    perspective: 1200px;
    transform-style: preserve-3d;
    position: relative;
    /*transform: rotateY(90deg);*/
    transform: rotateY(-10deg);
    flex-wrap: wrap;
}

.paper-net > div {
    position: absolute;
    display: flex;
}

.paper-net .top    { transform: rotateX(90deg) translateZ(50px); }
.paper-net .bottom { transform: rotateX(-90deg) translateZ(-50px); }
.paper-net  .rear { transform: rotateY(-90deg) translateZ(88px);  }
.paper-net .right { transform: translateZ(20px); }
.paper-net .front { transform: rotateY(90deg) translateZ(88px); }
.paper-net .left  { transform: rotateY(180deg) translateZ(20px); }

.paper-net:hover {
    transform: rotateX(-30deg) rotateY(-50deg)!important;
    box-shadow: none;
}
.bus-view span:hover {
    outline: 2px solid rgba(255, 255, 255, 0.5); /* Semi-transparent white */
    outline-offset: 2px; /* Creates spacing around the highlight */
    box-shadow: 0 0 8px rgba(255, 255, 0, 0.6); /* Soft yellow glow */
    filter: brightness(1.2); /* Slightly brightens on hover */
}